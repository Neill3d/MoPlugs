
//////////////////////////////////////////////////////////////////////////////////////////////////
//
// file: shared_customcolor.glslfxh
//
//
//	Author Sergey Solokhin (Neill3d)
//
//	GitHub page - https://github.com/Neill3d/MoPlugs
//	Licensed under BSD 3-Clause - https://github.com/Neill3d/MoPlugs/blob/master/LICENSE
//
///////////////////////////////////////////////////////////////////////////////////////////////////

/*
** Float blending modes
** Adapted from here: http://www.nathanm.com/photoshop-blending-math/
** But I modified the HardMix (wrong condition), Overlay, SoftLight, ColorDodge, ColorBurn, VividLight, PinLight (inverted layers) ones to have correct results
*/

GLSLShader
{
	#define BlendLinearDodgef 			BlendAddf
	#define BlendLinearBurnf 			BlendSubstractf
	#define BlendAddf(base, blend) 		min(base + blend, 1.0)
	#define BlendSubstractf(base, blend) 	max(base + blend - 1.0, 0.0)
	#define BlendLightenf(base, blend) 		max(blend, base)
	#define BlendDarkenf(base, blend) 		min(blend, base)
	#define BlendLinearLightf(base, blend) 	(blend < 0.5 ? BlendLinearBurnf(base, (2.0 * blend)) : BlendLinearDodgef(base, (2.0 * (blend - 0.5))))
	#define BlendScreenf(base, blend) 		(1.0 - ((1.0 - base) * (1.0 - blend)))
	#define BlendOverlayf(base, blend) 	(base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))
	#define BlendSoftLightf(base, blend) 	((blend < 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)))
	#define BlendColorDodgef(base, blend) 	((blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0))
	#define BlendColorBurnf(base, blend) 	((blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0))
	#define BlendVividLightf(base, blend) 	((blend < 0.5) ? BlendColorBurnf(base, (2.0 * blend)) : BlendColorDodgef(base, (2.0 * (blend - 0.5))))
	#define BlendPinLightf(base, blend) 	((blend < 0.5) ? BlendDarkenf(base, (2.0 * blend)) : BlendLightenf(base, (2.0 *(blend - 0.5))))
	#define BlendHardMixf(base, blend) 	((BlendVividLightf(base, blend) < 0.5) ? 0.0 : 1.0)
	#define BlendReflectf(base, blend) 		((blend == 1.0) ? blend : min(base * base / (1.0 - blend), 1.0))

	// Component wise blending
	#define Blend(base, blend, funcf) 		vec3(funcf(base.r, blend.r), funcf(base.g, blend.g), funcf(base.b, blend.b))
	
	#define BlendNormal(base, blend) 		(blend)
	#define BlendLighten				BlendLightenf
	#define BlendDarken				BlendDarkenf
	#define BlendMultiply(base, blend) 		(base * blend)
	#define BlendAverage(base, blend) 		((base + blend) / 2.0)
	#define BlendAdd(base, blend) 		min(base + blend, vec3(1.0))
	#define BlendSubstract(base, blend) 	max(base + blend - vec3(1.0), vec3(0.0))
	#define BlendDifference(base, blend) 	abs(base - blend)
	#define BlendNegation(base, blend) 	(vec3(1.0) - abs(vec3(1.0) - base - blend))
	#define BlendExclusion(base, blend) 	(base + blend - 2.0 * base * blend)
	#define BlendScreen(base, blend) 		Blend(base, blend, BlendScreenf)
	#define BlendOverlay(base, blend) 		Blend(base, blend, BlendOverlayf)
	#define BlendSoftLight(base, blend) 	Blend(base, blend, BlendSoftLightf)
	#define BlendHardLight(base, blend) 	BlendOverlay(blend, base)
	#define BlendColorDodge(base, blend) 	Blend(base, blend, BlendColorDodgef)
	#define BlendColorBurn(base, blend) 	Blend(base, blend, BlendColorBurnf)
	#define BlendLinearDodge			BlendAdd
	#define BlendLinearBurn			BlendSubstract
	// Linear Light is another contrast-increasing mode
	// If the blend color is darker than midgray, Linear Light darkens the image by decreasing the brightness. If the blend color is lighter than midgray, the result is a brighter image due to increased brightness.
	#define BlendLinearLight(base, blend) 	Blend(base, blend, BlendLinearLightf)
	#define BlendVividLight(base, blend) 	Blend(base, blend, BlendVividLightf)
	#define BlendPinLight(base, blend) 		Blend(base, blend, BlendPinLightf)
	#define BlendHardMix(base, blend) 		Blend(base, blend, BlendHardMixf)
	#define BlendReflect(base, blend) 		Blend(base, blend, BlendReflectf)
	#define BlendGlow(base, blend) 		BlendReflect(blend, base)
	#define BlendPhoenix(base, blend) 		(min(base, blend) - max(base, blend) + vec3(1.0))
	#define BlendOpacity(base, blend, F, O) 	(F(base, blend) * O + base * (1.0 - O))
	#define BlendSimpleOpacity(base, blend, O)  (blend * O + base * (1.0 - O))
}

GLSLShader
{
	//
    // Prototypes
    //
	void something();
	//vec3 ApplyBlend(vec3 base, vec3 blend);
	void ApplyContrastSaturationBrightness(in float brt, in float sat, in float con, inout vec3 color);
}

/*
namespace BlendModes < programTarget="CustomColor"; >
{

	GLSLShader global BlendNormal
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return blend;
		}
	}

	GLSLShader global BlendLighten
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendLighten(base, blend);
		}
	}

	GLSLShader global BlendDarken
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendDarken(base, blend);
		}
	}

	GLSLShader global BlendMultiply
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendMultiply(base, blend);
		}
	}

	GLSLShader global BlendAverage
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendAverage(base, blend);
		}
	}

	GLSLShader global BlendAdd
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendAdd(base, blend);
		}
	}

	GLSLShader global BlendSubstract
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendSubstract(base, blend);
		}
	}

	GLSLShader global BlendDifference
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendDifference(base, blend);
		}
	}

	GLSLShader global BlendNegation
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendNegation(base, blend);
		}
	}

	GLSLShader global BlendExclusion
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendExclusion(base, blend);
		}
	}

	GLSLShader global BlendScreen
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendScreen(base, blend);
		}
	}

	GLSLShader global BlendOverlay
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendOverlay(base, blend);
		}
	}

	GLSLShader global BlendSoftLight
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendSoftLight(base, blend);
		}
	}

	GLSLShader global BlendHardLight
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendHardLight(base, blend);
		}
	}

	GLSLShader global BlendColorDodge
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendColorDodge(base, blend);
		}
	}

	GLSLShader global BlendColorBurn
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendColorBurn(base, blend);
		}
	}

	GLSLShader global BlendLinearDodge
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendLinearDodge(base, blend);
		}
	}

	GLSLShader global BlendLinearBurn
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendLinearBurn(base, blend);
		}
	}

	GLSLShader global BlendLinearLight
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendLinearLight(base, blend);
		}
	}

	GLSLShader global BlendVividLight
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendVividLight(base, blend);
		}
	}

	GLSLShader global BlendPinLight
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendPinLight(base, blend);
		}
	}

	GLSLShader global BlendHardMix
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendHardMix(base, blend);
		}
	}

	GLSLShader global BlendReflect
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendReflect(base, blend);
		}
	}

	GLSLShader global BlendGlow
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendGlow(base, blend);
		}
	}

	GLSLShader global BlendPhoenix
	{
		vec3 ApplyBlend(vec3 base, vec3 blend) {
			return BlendPhoenix(base, blend);
		}
	}
	
}
*/
/*
** Contrast, saturation, brightness
** Code of this function is from TGM's shader pack
** http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=21057
*/

namespace CSB < programTarget="CSB"; >
{

	GLSLShader global DoContrastSaturationBrightness
	{	
		// For all settings: 1.0 = 100% 0.5=50% 1.5 = 150%
		void ApplyContrastSaturationBrightness(in float brt, in float sat, in float con, inout vec3 color)
		{
			// Increase or decrease theese values to adjust r, g and b color channels seperately
			const float AvgLumR = 0.5;
			const float AvgLumG = 0.5;
			const float AvgLumB = 0.5;
			
			const vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);
			
			vec3 AvgLumin = vec3(AvgLumR, AvgLumG, AvgLumB);
			vec3 brtColor = color * brt;
			vec3 intensity = vec3(dot(brtColor, LumCoeff));
			vec3 satColor = mix(intensity, brtColor, sat);
			vec3 conColor = mix(AvgLumin, satColor, con);
			color = conColor;
		}
	}

	GLSLShader global EmptyContrastSaturationBrightness
	{
		void ApplyContrastSaturationBrightness(in float brt, in float sat, in float con, inout vec3 color)
		{
		}
	}
	
}