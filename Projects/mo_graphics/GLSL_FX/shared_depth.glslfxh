
//////////////////////////////////////////////////////////////////////////////////////////////////
//
// file: shared_depth.glslfxh
//
// shared_depth (linear and logarithmic depth drawing)
//
//	Author Sergey Solokhin (Neill3d)
//
//	GitHub page - https://github.com/Neill3d/MoPlugs
//	Licensed under BSD 3-Clause - https://github.com/Neill3d/MoPlugs/blob/master/LICENSE
//
///////////////////////////////////////////////////////////////////////////////////////////////////

//
// GLSL Globals : meaning that all the GLSL domains (vertex, fragments etc.) will have a copy
// of these data
//

uniform float 	Fcoef;	// Fcoef = 2.0 / log2(farplane + 1.0)

GLSLShader
{
	
	// prototypes
	
	void VS_Depth(in float displacement, inout vec4 position);
	void FS_Depth();
	float GetFragmentZ();
	void ComputeDepth(in float d, out float depth);
}

////////////////////////////////////////////

namespace VertexDepthAlgorithm <programTarget="vertexDepth";>
{
	GLSLShader global linearDepth
	{
		void VS_Depth(in float displacement, inout vec4 position)
		{
		}
	}
	
	GLSLShader global logDepth
	{
		out float flogz;
		
		void VS_Depth(in float displacement, inout vec4 position)
		{
			position.z = log2(max(1e-6, 1.0 + position.w)) * Fcoef - 1.0;
			flogz = 1.0 + position.w + displacement;
		}
	}
}

namespace FragmentDepthAlgorithm <programTarget="fragmentDepth";>
{
	GLSLShader global linearDepth
	{
		void FS_Depth()
		{
		}
		
		float GetFragmentZ()
		{
			return gl_FragCoord.z;
		}
		
		void ComputeDepth(in float d, out float depth)
		{
			float n = 10.0;
			float f = farPlane;
			
			float lz = 2.0 * d - 1.0; 
			depth = (2.0 * n) / (f + n - lz * (f - n));
		}
	}
	
	GLSLShader global logDepth
	{
		in float flogz;
		
		void FS_Depth()
		{
			float Fcoef_half = 0.5 * Fcoef;
			gl_FragDepth = log2(flogz) * Fcoef_half;
		}
		
		float GetFragmentZ()
		{
			float Fcoef_half = 0.5 * Fcoef;
			return log2(flogz) * Fcoef_half;
		}
		
		void ComputeDepth(in float d, out float depth)
		{
			float C = 1.0;
			float z = (exp(d*log(C*farPlane+1.0)) - 1.0)/C;
			
			depth = z / farPlane;
		}
	}
}
/*
namespace LogDepth <programTarget="depthAlgorithm";>
{
	GLSLShader global vertexDepthAlgorithm
	{
		void VS_Depth(in float displacement, inout vec4 position)
		{
			position.z = log2(max(1e-6, 1.0 + position.w)) * Fcoef - 1.0;
			flogz = 1.0 + position.w + displacement;
		}
	}
	
	GLSLShader global depthAlgorithm
	{
		void FS_Depth()
		{
			float Fcoef_half = 0.5 * Fcoef;
			gl_FragDepth = log2(flogz) * Fcoef_half;
		}
	}
}
*/


